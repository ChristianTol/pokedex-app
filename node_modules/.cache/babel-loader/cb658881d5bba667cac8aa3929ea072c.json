{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\pokeapp\\\\src\\\\components\\\\PokemonData.jsx\";\nimport React, { useState } from 'react';\nimport { Container, Row, Col, Card, ProgressBar } from 'react-bootstrap';\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst TYPE_COLORS = {\n  bug: 'B1C12E',\n  dark: '4F3A2D',\n  dragon: '755EDF',\n  electric: 'FCBC17',\n  fairy: 'F4B1F4',\n  fighting: '823551D',\n  fire: 'E73B0C',\n  flying: 'A3B3F7',\n  ghost: '606082',\n  grass: '74C236',\n  ground: 'D3B357',\n  ice: 'A3E7FD',\n  normal: 'C8C4BC',\n  poison: '934594',\n  psychic: 'ED4882',\n  rock: 'B9A156',\n  steel: 'B5B5C3',\n  water: '3295F6'\n};\nconst STAT_COLORS = {\n  hp: 'FF5959',\n  attack: 'F5AC78',\n  defense: 'FAE078',\n  'special-attack': '9DB7F5',\n  'special-defense': 'A7DB8D',\n  speed: 'FA92B2'\n};\nexport default function PokemonData(props) {\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, capitalizeFirstLetter(props.name)), /*#__PURE__*/React.createElement(\"img\", {\n    src: props.sprite,\n    alt: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, \"Abilities\"), props.abilities.map((ability, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }, capitalizeFirstLetter(ability.ability.name)))), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"Types\"), props.types.map((type, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    style: {\n      backgroundColor: `#${TYPE_COLORS[type.type.name]}`,\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  }, capitalizeFirstLetter(type.type.name))))))), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Base Stats\"), props.stats.map((stat, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, stat.stat.name === 'hp' ? stat.stat.name.toUpperCase() : capitalizeFirstLetter(stat.stat.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: '24px',\n      fontSize: '16px',\n      fontWeight: 700\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"progress-bar\",\n    role: \"progressbar\",\n    style: {\n      width: `calc(${stat.base_stat} / 255 * 100%)`,\n      backgroundColor: `#${STAT_COLORS[stat.stat.name]}`,\n      color: 'white'\n    },\n    \"aria-valuenow\": `${stat.base_stat}`,\n    \"aria-valuemax\": 255,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, stat.base_stat)))))))));\n}","map":{"version":3,"sources":["C:/Users/chris/Desktop/pokeapp/src/components/PokemonData.jsx"],"names":["React","useState","Container","Row","Col","Card","ProgressBar","capitalizeFirstLetter","string","charAt","toUpperCase","slice","TYPE_COLORS","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","STAT_COLORS","hp","attack","defense","speed","PokemonData","props","name","sprite","abilities","map","ability","key","types","type","backgroundColor","color","stats","stat","marginBottom","height","fontSize","fontWeight","width","base_stat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Container, Row, Col, Card, ProgressBar } from 'react-bootstrap';\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst TYPE_COLORS = {\n  bug: 'B1C12E',\n  dark: '4F3A2D',\n  dragon: '755EDF',\n  electric: 'FCBC17',\n  fairy: 'F4B1F4',\n  fighting: '823551D',\n  fire: 'E73B0C',\n  flying: 'A3B3F7',\n  ghost: '606082',\n  grass: '74C236',\n  ground: 'D3B357',\n  ice: 'A3E7FD',\n  normal: 'C8C4BC',\n  poison: '934594',\n  psychic: 'ED4882',\n  rock: 'B9A156',\n  steel: 'B5B5C3',\n  water: '3295F6'\n}\n\nconst STAT_COLORS = {\n  hp: 'FF5959',\n  attack: 'F5AC78',\n  defense: 'FAE078',\n  'special-attack': '9DB7F5',\n  'special-defense': 'A7DB8D',\n  speed: 'FA92B2'\n}\n\n\nexport default function PokemonData(props) {\n\n  \n  return (\n    <Container className=\"mt-2\">\n      <Row>\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Header>\n              <h5>{capitalizeFirstLetter(props.name)}</h5>\n              <img src={props.sprite} alt={props.name} />\n            </Card.Header>\n            <Card.Body>\n              <h5>Abilities</h5>\n              {props.abilities.map((ability, key) => (\n                <div key={key}>\n                  <span>{capitalizeFirstLetter(ability.ability.name)}</span>\n                </div>\n              ))}\n              <h5>Types</h5>\n              {props.types.map((type, key) => (\n                <div \n                  key={key} \n                  style={{\n                    backgroundColor: `#${TYPE_COLORS[type.type.name]}`,\n                    color: 'white'\n                  }}\n                >\n                  <p>{capitalizeFirstLetter(type.type.name)}</p>\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Body>\n              <h4>Base Stats</h4>\n              {props.stats.map((stat, key) => (\n                <div key={key} style={{}}>\n                  <strong style={{marginBottom: '10px'}}>{stat.stat.name === 'hp' ? stat.stat.name.toUpperCase() : capitalizeFirstLetter(stat.stat.name)}</strong>\n                  <div className=\"progress\" style={{height: '24px', fontSize: '16px', fontWeight: 700}}>\n                    <div class=\"progress-bar\" role=\"progressbar\" style={{width: `calc(${stat.base_stat} / 255 * 100%)`, backgroundColor: `#${STAT_COLORS[stat.stat.name]}`, color: 'white'}} aria-valuenow={`${stat.base_stat}`} aria-valuemax={255} >{stat.base_stat}</div>\n                  </div>\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}"]},"metadata":{},"sourceType":"module"}